# Generated by Django 5.2.6 on 2025-10-06 07:17

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0006_user_google_access_token_user_google_id_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='chatmessage',
            name='classifier_token',
            field=models.CharField(blank=True, help_text='Intent classifier result: DIRECT_ANSWER, MIXED, or RETURN_QUESTION', max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='chatsession',
            name='language',
            field=models.CharField(default='tanglish', help_text='Language preference: tanglish or english', max_length=16),
        ),
        migrations.CreateModel(
            name='QuestionItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_id', models.CharField(help_text='Auto-generated question ID', max_length=64)),
                ('archetype', models.CharField(choices=[('Concept Unfold', 'Concept Unfold'), ('Critical Reversal', 'Critical Reversal'), ('Application Sprint', 'Application Sprint'), ('Explainer Role', 'Explainer Role'), ('Scenario Repair', 'Scenario Repair'), ('Experimental Thinking', 'Experimental Thinking'), ('Debate Card', 'Debate Card')], help_text='Question archetype from spec', max_length=64)),
                ('question_text', models.TextField(help_text='The Tanglish question text')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=16)),
                ('expected_answer', models.TextField(help_text='Expected answer or key concepts')),
                ('order', models.IntegerField(default=0, help_text='Question order in sequence')),
                ('asked', models.BooleanField(default=False, help_text='Whether question has been asked')),
                ('topic_diversity_score', models.FloatField(default=0.0)),
                ('cognitive_variety_score', models.FloatField(default=0.0)),
                ('difficulty_progression_score', models.FloatField(default=0.0)),
                ('recency_penalty', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='structured_questions', to='api.tutoringquestionbatch')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_items', to='api.chatsession')),
            ],
            options={
                'verbose_name': 'Question Item',
                'verbose_name_plural': 'Question Items',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='EvaluatorResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('raw_json', models.JSONField(help_text='Raw JSON response from evaluator')),
                ('score', models.FloatField(help_text='Score between 0.0 and 1.0')),
                ('correct', models.BooleanField(help_text='Whether answer is correct (score >= 0.75)')),
                ('xp', models.IntegerField(default=0, help_text='XP points awarded (1-100)')),
                ('explanation', models.TextField(help_text='Tanglish explanation of evaluation')),
                ('confidence', models.FloatField(help_text='Evaluator confidence (0.0-1.0)')),
                ('followup_action', models.CharField(choices=[('none', 'None'), ('give_hint', 'Give Hint'), ('ask_clarification', 'Ask Clarification'), ('show_solution', 'Show Solution')], default='none', max_length=32)),
                ('return_question_answer', models.TextField(blank=True, help_text='Tanglish hint or correction to send to student')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation', to='api.chatmessage')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evaluations', to='api.questionitem')),
            ],
            options={
                'verbose_name': 'Evaluator Result',
                'verbose_name_plural': 'Evaluator Results',
                'ordering': ['-created_at'],
            },
        ),
    ]
